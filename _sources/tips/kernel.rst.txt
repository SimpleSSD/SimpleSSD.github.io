***************************
Build Linux Kernel for gem5
***************************

In this page, we will explain how to prepare Linux Kernel for gem5.


Prerequisite
============


Prepare kernel config files
---------------------------

Before starting, please download ``kernel_configs`` directory from :xref:`here <camelab_files>`.
This directory contains two files, ``config_arm`` and ``config_x86``.


Download Linux Kernel source code
---------------------------------

You can download Linux Kernel from :xref:`linux_kernel`.

This table shows minimum Linux Kernel version supported by architectures and interfaces:

+--------------+----------+----------------+-----------+----------+---------------+
| Architecture | NVMe     | OCSSD [*]_ 1.2 | OCSSD 2.0 | SATA     | UFS           |
+==============+==========+================+===========+==========+===============+
| ARMv7        | 3.3 [1]_ | 4.12 [4]_      | 4.17 [5]_ | All      | 4.8 [6]_      |
+--------------+----------+----------------+-----------+----------+---------------+
| ARMv8        | 4.4 [2]_ | 4.12 [4]_      | 4.17 [5]_ | 4.4 [2]_ | 4.8 [6]_      |
+--------------+----------+----------------+-----------+----------+---------------+
| X86          | 4.4 [3]_ | 4.12 [4]_      | 4.17 [5]_ | 4.4 [3]_ | Not supported |
+--------------+----------+----------------+-----------+----------+---------------+

.. [*] **OCSSD** stands for Open-Channel SSD.
.. [1] NVMe driver is added to Linux Kernel from 3.3.
.. [2] ARMv8 (aarch64) is supported from Linux Kernel 3.7 but PCI host controller used in gem5 is supported from 4.4.
.. [3] X86 architecture of gem5 is quite unstable. Linux Kernel 3.4.113 ~ 4.3 does not boot.
.. [4] ``pblk`` driver of Open-Channel SSD is available from 4.12. ``rrpc`` is not supported by SimpleSSD.
.. [5] Linux Kernel supports Open-Channel SSD 2.0 from 4.17. We recommend to use **4.18**.
.. [6] UFS driver that SimpleSSD uses is added to Linux Kernel from 4.8.


.. _tips_kernel_toolchain:

Download toolchain
------------------

Prepare compiler for kernel compilation.

For ``X86`` architecture, you can just use GNU C/C++ Compiler installed on your host X86 machine.
If you are using non-x86 machine, you need to prepare x86 cross-compiler for your machine.

For ``ARM`` architecture, you need to download ARM cross-compiler.
We recommend to use :xref:`linaro`.
Download ``arm-linux-gnueabihf`` for ``ARMv7``, ``aarch64-linux-gnu`` for ``ARMv8``.

Install toolchain and properly set ``PATH`` environment variable.


Download dependencies
---------------------

Install utilities and libraries used by Linux Kernel.

.. code-block:: shell

  # For Debian based Linux
  apt install libcurses-dev bc libssl-dev

  # For Red Hat based Linux
  yum install ncurses-devel bc openssl-devel


Build Linux Kernel
==================

Extract downloaded Linux Kernel archive and ``cd`` to extracted directory.

Set ``ARCH`` and ``CROSS_COMPILE`` correctly using following table:

+---------------+----------------------+--------------------+----------------+
| Variable      | ARMv7                | ARMv8              | X86            |
+===============+======================+====================+================+
| ARCH          | arm                  | arm64              | x86 or <Empty> |
+---------------+----------------------+--------------------+----------------+
| CROSS_COMPILE | arm-linux-gnueabihf- | aarch64-linux-gnu- | <Empty>        |
+---------------+----------------------+--------------------+----------------+

Create default kernel configuration file:

.. code-block:: shell

  ARCH="<arch to build>" CROSS_COMPILE="<prefix of compiler>" make defconfig

Override created ``.config`` file with provided sample configuration file.

.. code-block:: shell

  # For ARMv7 and ARMv8
  cp -f config_arm .config

  # For X86
  cp -f config_x86 .config

Open kernel configuration page at least once.
This will fix undefined configuration entitles in ``.config`` file.
You can also change configuration here.

.. code-block:: shell

  ARCH="<arch to build>" CROSS_COMPILE="<prefix of compiler>" make menuconfig

Build Linux Kernel image:

.. code-block:: shell

  ARCH="<arch to build>" CROSS_COMPILE="<prefix of compiler>" make vmlinux -j 8

After build, copy ``vmlinux`` image to ``$M5_PATH/binaries`` directory.

.. code-block:: shell

  cp vmlinux $M5_PATH/binaries/my_new_kernel_image
